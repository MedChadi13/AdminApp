{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$componentsProp2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.columnField);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operatorValue);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$initialState3","_props$initialState3$","_props$componentsProp2","logger","current","unstable_registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","_column$filterOperato","value","undefined","column","getColumn","columnField","filterOperator","filterOperators","find","operator","operatorValue","requiresFilterValue","newFilterItems","filterItemOnTarget","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","unstable_updateControlState","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"sources":["/Users/user/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n\n        if (item.value !== undefined) {\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.columnField);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operatorValue);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}