{"ast":null,"code":"import e, { createContext as t, Component as r, Children as n, cloneElement as i } from \"react\";\nimport \"prop-types\";\nimport { getFlippedElementPositionsBeforeUpdate as o, onFlipKeyUpdate as p, utilities as l, constants as a, spring as s } from \"flip-toolkit\";\nfunction c(e, t) {\n  if (null == e) return {};\n  var r,\n    n,\n    i = {},\n    o = Object.keys(e);\n  for (n = 0; n < o.length; n++) t.indexOf(r = o[n]) >= 0 || (i[r] = e[r]);\n  return i;\n}\nvar d = t({}),\n  f = t(\"portal\"),\n  u = function (t) {\n    var r, n;\n    function i() {\n      var e;\n      return (e = t.apply(this, arguments) || this).inProgressAnimations = {}, e.flipCallbacks = {}, e.el = void 0, e;\n    }\n    n = t, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n;\n    var l = i.prototype;\n    return l.getSnapshotBeforeUpdate = function (e) {\n      return e.flipKey !== this.props.flipKey && this.el ? o({\n        element: this.el,\n        flipCallbacks: this.flipCallbacks,\n        inProgressAnimations: this.inProgressAnimations,\n        portalKey: this.props.portalKey\n      }) : null;\n    }, l.componentDidUpdate = function (e, t, r) {\n      this.props.flipKey !== e.flipKey && this.el && p({\n        flippedElementPositionsBeforeUpdate: r.flippedElementPositions,\n        cachedOrderedFlipIds: r.cachedOrderedFlipIds,\n        containerEl: this.el,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.props.applyTransformOrigin,\n        spring: this.props.spring,\n        debug: this.props.debug,\n        portalKey: this.props.portalKey,\n        staggerConfig: this.props.staggerConfig,\n        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n        decisionData: {\n          previous: e.decisionData,\n          current: this.props.decisionData\n        },\n        onComplete: this.props.onComplete,\n        onStart: this.props.onStart\n      });\n    }, l.render = function () {\n      var t = this,\n        r = this.props,\n        n = r.portalKey,\n        i = e.createElement(d.Provider, {\n          value: this.flipCallbacks\n        }, e.createElement(r.element, {\n          className: r.className,\n          ref: function (e) {\n            return t.el = e;\n          }\n        }, this.props.children));\n      return n && (i = e.createElement(f.Provider, {\n        value: n\n      }, i)), i;\n    }, i;\n  }(r);\nu.defaultProps = {\n  applyTransformOrigin: !0,\n  element: \"div\"\n};\nvar h = function (e) {\n    var t,\n      r = e.children,\n      o = e.flipId,\n      p = e.inverseFlipId,\n      s = e.portalKey,\n      d = c(e, [\"children\", \"flipId\", \"inverseFlipId\", \"portalKey\"]),\n      f = r,\n      u = function (e) {\n        return \"function\" == typeof e;\n      }(f);\n    if (!u) try {\n      f = n.only(r);\n    } catch (e) {\n      throw new Error(\"Each Flipped component must wrap a single child\");\n    }\n    d.scale || d.translate || d.opacity || l.assign(d, {\n      translate: !0,\n      scale: !0,\n      opacity: !0\n    });\n    var h = ((t = {})[a.DATA_FLIP_CONFIG] = JSON.stringify(d), t);\n    return void 0 !== o ? h[a.DATA_FLIP_ID] = String(o) : p && (h[a.DATA_INVERSE_FLIP_ID] = String(p)), void 0 !== s && (h[a.DATA_PORTAL_KEY] = s), u ? f(h) : i(f, h);\n  },\n  m = function (t) {\n    var r = t.children,\n      n = t.flipId,\n      i = t.shouldFlip,\n      o = t.shouldInvert,\n      p = t.onAppear,\n      a = t.onStart,\n      s = t.onStartImmediate,\n      u = t.onComplete,\n      m = t.onExit,\n      g = t.onSpringUpdate,\n      y = c(t, [\"children\", \"flipId\", \"shouldFlip\", \"shouldInvert\", \"onAppear\", \"onStart\", \"onStartImmediate\", \"onComplete\", \"onExit\", \"onSpringUpdate\"]);\n    return r ? y.inverseFlipId ? e.createElement(h, Object.assign({}, y), r) : e.createElement(f.Consumer, null, function (t) {\n      return e.createElement(d.Consumer, null, function (c) {\n        return l.isObject(c) && n && (c[n] = {\n          shouldFlip: i,\n          shouldInvert: o,\n          onAppear: p,\n          onStart: a,\n          onStartImmediate: s,\n          onComplete: u,\n          onExit: m,\n          onSpringUpdate: g\n        }), e.createElement(h, Object.assign({\n          flipId: n\n        }, y, {\n          portalKey: t\n        }), r);\n      });\n    }) : null;\n  };\nm.displayName = \"Flipped\";\nvar g = function (e) {\n  var t;\n  return i(e.children, ((t = {})[a.DATA_EXIT_CONTAINER] = !0, t));\n};\nexport { g as ExitContainer, m as Flipped, u as Flipper, s as spring };","map":{"version":3,"sources":["../src/Flipper/context.ts","../src/Flipper/index.tsx","../src/Flipped/index.tsx","../src/ExitContainer/index.tsx"],"names":["FlipContext","createContext","PortalContext","Flipper","Component","applyTransformOrigin","element","_this","undefined","getSnapshotBeforeUpdate","prevProps","flipKey","this","props","el","getFlippedElementPositionsBeforeUpdate","flipCallbacks","inProgressAnimations","portalKey","componentDidUpdate","_prevState","cachedData","onFlipKeyUpdate","flippedElementPositionsBeforeUpdate","flippedElementPositions","cachedOrderedFlipIds","containerEl","spring","debug","staggerConfig","handleEnterUpdateDelete","decisionData","previous","current","onComplete","onStart","render","className","flipperMarkup","React","Provider","value","ref","_this2","children","child","Flipped","flipId","inverseFlipId","rest","isFunctionAsChildren","isFunction","Children","only","e","Error","scale","translate","opacity","utilities","assign","dataAttributes","constants","DATA_FLIP_CONFIG","JSON","stringify","DATA_FLIP_ID","String","DATA_INVERSE_FLIP_ID","DATA_PORTAL_KEY","cloneElement","FlippedWithContext","shouldFlip","shouldInvert","onAppear","onStartImmediate","onExit","onSpringUpdate","Consumer","isObject","data","displayName","ExitContainer","DATA_EXIT_CONTAINER"],"mappings":"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","sourcesContent":["import { createContext } from 'react'\nimport { FlipCallbacks } from 'flip-toolkit/lib/types'\n\nexport const FlipContext = createContext({} as FlipCallbacks)\nexport const PortalContext = createContext('portal')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  getFlippedElementPositionsBeforeUpdate,\n  onFlipKeyUpdate\n} from 'flip-toolkit'\nimport {\n  FlipperProps,\n  InProgressAnimations,\n  FlipCallbacks\n} from 'flip-toolkit/lib/types'\nimport { FlippedElementPositionsBeforeUpdateReturnVals } from 'flip-toolkit/lib/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlipContext, PortalContext } from './context'\n\nclass Flipper extends Component<FlipperProps> {\n  static defaultProps = {\n    applyTransformOrigin: true,\n    element: 'div'\n  }\n\n  private inProgressAnimations: InProgressAnimations = {}\n  private flipCallbacks: FlipCallbacks = {}\n  private el?: HTMLElement = undefined\n\n  getSnapshotBeforeUpdate(prevProps: FlipperProps) {\n    if (prevProps.flipKey !== this.props.flipKey && this.el) {\n      return getFlippedElementPositionsBeforeUpdate({\n        element: this.el,\n        // if onExit callbacks exist here, we'll cache the DOM node\n        flipCallbacks: this.flipCallbacks,\n        inProgressAnimations: this.inProgressAnimations,\n        portalKey: this.props.portalKey\n      })\n    }\n    return null\n  }\n\n  componentDidUpdate(\n    prevProps: FlipperProps,\n    _prevState: any,\n    cachedData: FlippedElementPositionsBeforeUpdateReturnVals\n  ) {\n    if (this.props.flipKey !== prevProps.flipKey && this.el) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: cachedData.flippedElementPositions,\n        cachedOrderedFlipIds: cachedData.cachedOrderedFlipIds,\n        containerEl: this.el,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.props.applyTransformOrigin,\n        spring: this.props.spring,\n        debug: this.props.debug,\n        portalKey: this.props.portalKey,\n        staggerConfig: this.props.staggerConfig,\n        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevProps.decisionData,\n          current: this.props.decisionData\n        },\n        onComplete: this.props.onComplete,\n        onStart: this.props.onStart\n      })\n    }\n  }\n\n  public render() {\n    const { element, className, portalKey } = this.props\n    const Element = element\n\n    let flipperMarkup = (\n      <FlipContext.Provider value={this.flipCallbacks}>\n        {/*\n        // @ts-ignore */}\n        <Element\n          className={className}\n          ref={(el: HTMLElement) => (this.el = el)}\n        >\n          {this.props.children}\n        </Element>\n      </FlipContext.Provider>\n    )\n\n    if (portalKey) {\n      flipperMarkup = (\n        <PortalContext.Provider value={portalKey}>\n          {flipperMarkup}\n        </PortalContext.Provider>\n      )\n    }\n\n    return flipperMarkup\n  }\n}\n// @ts-ignore\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  Flipper.propTypes = {\n    flipKey: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.bool\n    ]),\n    children: PropTypes.node.isRequired,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    applyTransformOrigin: PropTypes.bool,\n    debug: PropTypes.bool,\n    element: PropTypes.string,\n    className: PropTypes.string,\n    portalKey: PropTypes.string,\n    staggerConfig: PropTypes.object,\n    decisionData: PropTypes.any,\n    handleEnterUpdateDelete: PropTypes.func,\n    onComplete: PropTypes.func,\n    onStart: PropTypes.func\n  }\n}\n\nexport default Flipper\n","import React, {\n  FunctionComponent,\n  Children,\n  cloneElement,\n  ReactElement\n} from 'react'\nimport PropTypes from 'prop-types'\nimport { utilities, constants } from 'flip-toolkit'\nimport { FlippedProps, SerializableFlippedProps } from 'flip-toolkit/lib/types'\nimport { FlipContext, PortalContext } from '../Flipper/context'\n\nfunction isFunction(child: any): child is Function {\n  return typeof child === 'function'\n}\n\n// This wrapper creates child components for the main Flipper component\nexport const Flipped: FunctionComponent<SerializableFlippedProps> = ({\n  children,\n  flipId,\n  inverseFlipId,\n  portalKey,\n  ...rest\n}) => {\n  let child = children\n  const isFunctionAsChildren = isFunction(child)\n\n  if (!isFunctionAsChildren) {\n    try {\n      child = Children.only(children)\n    } catch (e) {\n      throw new Error('Each Flipped component must wrap a single child')\n    }\n  }\n\n  // if nothing is being animated, assume everything is being animated\n  if (!rest.scale && !rest.translate && !rest.opacity) {\n    utilities.assign(rest, {\n      translate: true,\n      scale: true,\n      opacity: true\n    })\n  }\n\n  const dataAttributes: Record<string, string | undefined> = {\n    [constants.DATA_FLIP_CONFIG]: JSON.stringify(rest)\n  }\n\n  if (flipId !== undefined)\n    dataAttributes[constants.DATA_FLIP_ID] = String(flipId)\n  else if (inverseFlipId)\n    dataAttributes[constants.DATA_INVERSE_FLIP_ID] = String(inverseFlipId)\n  if (portalKey !== undefined) {\n    dataAttributes[constants.DATA_PORTAL_KEY] = portalKey\n  }\n  if (isFunctionAsChildren) {\n    return (child as Function)(dataAttributes)\n  }\n  return cloneElement(child as ReactElement<any>, dataAttributes)\n}\n// @ts-ignore\nexport const FlippedWithContext: FunctionComponent<FlippedProps> = ({\n  children,\n  flipId,\n  shouldFlip,\n  shouldInvert,\n  onAppear,\n  onStart,\n  onStartImmediate,\n  onComplete,\n  onExit,\n  onSpringUpdate,\n  ...rest\n}) => {\n  if (!children) {\n    return null\n  }\n  if (rest.inverseFlipId) {\n    return <Flipped {...rest}>{children}</Flipped>\n  }\n\n  return (\n    <PortalContext.Consumer>\n      {portalKey => (\n        <FlipContext.Consumer>\n          {data => {\n            // if there is no surrounding Flipper component,\n            // we don't want to throw an error, so check\n            // that data exists and is not the default string\n            if (utilities.isObject(data) && flipId) {\n              data[flipId] = {\n                shouldFlip,\n                shouldInvert,\n                onAppear,\n                onStart,\n                onStartImmediate,\n                onComplete,\n                onExit,\n                onSpringUpdate\n              }\n            }\n            return (\n              <Flipped flipId={flipId} {...rest} portalKey={portalKey}>\n                {children}\n              </Flipped>\n            )\n          }}\n        </FlipContext.Consumer>\n      )}\n    </PortalContext.Consumer>\n  )\n}\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  FlippedWithContext.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    inverseFlipId: PropTypes.string,\n    flipId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    opacity: PropTypes.bool,\n    translate: PropTypes.bool,\n    scale: PropTypes.bool,\n    transformOrigin: PropTypes.string,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onStart: PropTypes.func,\n    onStartImmediate: PropTypes.func,\n    onComplete: PropTypes.func,\n    onAppear: PropTypes.func,\n    onSpringUpdate: PropTypes.func,\n    shouldFlip: PropTypes.func,\n    shouldInvert: PropTypes.func,\n    onExit: PropTypes.func,\n    portalKey: PropTypes.string,\n    stagger: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n  }\n}\n\nFlippedWithContext.displayName = 'Flipped'\n\nexport default FlippedWithContext\n","import { FunctionComponent, cloneElement, ReactElement } from 'react'\nimport { constants } from 'flip-toolkit'\n\nconst ExitContainer: FunctionComponent = ({ children }) => {\n  return cloneElement(children as ReactElement<any>, {\n    [constants.DATA_EXIT_CONTAINER]: true\n  })\n}\n\nexport default ExitContainer\n"]},"metadata":{},"sourceType":"module"}