{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction isUIEvent(event) {\n  return !!event.target;\n}\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback((_ref, event) => {\n    let {\n      left,\n      renderContext: nextRenderContext = null\n    } = _ref;\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll);\n  const getColumns = function (params) {\n    let other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n    if (!nextRenderContext) {\n      return null;\n    }\n    const columns = [];\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n    return columns;\n  };\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    getRootProps: function () {\n      let other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        style: rootStyle\n      }, other);\n    },\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","ReactDOM","useForkRef","defaultMemoize","useGridApiContext","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","gridTabIndexColumnHeaderSelector","gridTabIndexCellSelector","gridFocusColumnHeaderSelector","gridDensityHeaderHeightSelector","gridFilterActiveItemsLookupSelector","gridSortColumnLookupSelector","gridColumnMenuSelector","useGridRootProps","useGridApiEventHandler","GridColumnHeaderItem","getFirstColumnIndexToRender","useGridVisibleRows","getRenderableIndexes","jsx","_jsx","isUIEvent","event","target","useGridColumnHeaders","props","innerRef","innerRefProp","minColumnIndex","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","visibleColumns","columnPositions","tabIndexState","cellTabIndexState","columnHeaderFocus","headerHeight","filterColumnLookup","sortColumnLookup","columnMenuState","rootProps","useRef","handleInnerRef","renderContext","setRenderContext","prevRenderContext","prevScrollLeft","currentPage","useEffect","current","columnHeadersContainerElementRef","scrollLeft","getFirstColumnIndexToRenderRef","equalityCheck","a","b","every","key","updateInnerPosition","useCallback","nextRenderContext","firstRowToRender","lastRowToRender","firstIndex","firstRowIndex","lastIndex","lastRowIndex","minFirstIndex","maxLastIndex","rows","length","buffer","rowBuffer","firstColumnToRender","firstColumnIndex","columnBuffer","visibleRows","offset","style","transform","useLayoutEffect","handleScroll","left","_prevRenderContext$cu","_prevRenderContext$cu2","lastColumnIndex","canUpdateInnerPosition","flushSync","handleColumnResizeStart","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","getColumns","other","minFirstColumn","maxLastColumn","columns","lastColumnToRender","Math","min","renderedColumns","slice","i","column","columnIndex","isFirstColumn","hasTabbableElement","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLastColumn","extendRowFullWidth","disableExtendRowFullWidth","rootStyle","minHeight","maxHeight","lineHeight","getRootProps","getInnerProps","ref","role"],"sources":["/Users/user/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback(({\n    left,\n    renderContext: nextRenderContext = null\n  }, event) => {\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll);\n\n  const getColumns = (params, other = {}) => {\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const columns = [];\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    getRootProps: (other = {}) => _extends({\n      style: rootStyle\n    }, other),\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}