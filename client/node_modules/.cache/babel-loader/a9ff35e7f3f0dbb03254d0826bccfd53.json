{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const setColumnHeaderFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(_ref => {\n    let {\n      id,\n      field\n    } = _ref;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback((_ref2, event) => {\n    let {\n      field\n    } = _ref2;\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseUp = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n    apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseUp', handleCellMouseUp);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","setCellFocus","useCallback","id","field","focusedCell","current","setState","debug","forceUpdate","getRow","publishEvent","getCellParams","setColumnHeaderFocus","event","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleBlur","handleCellMouseUp","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","unstable_moveFocusToRelativeCell","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"sources":["/Users/user/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseUp = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseUp', handleCellMouseUp);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,sBAAsB,QAAQ,oCAAoC;AAC3E,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,oCAAoC,QAAQ,gCAAgC;AACrF,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,OAAO,MAAMC,qBAAqB,GAAGC,KAAK,IAAIZ,QAAQ,CAAC,CAAC,CAAC,EAAEY,KAAK,EAAE;EAChEC,KAAK,EAAE;IACLC,IAAI,EAAE,IAAI;IACVC,YAAY,EAAE;EAChB,CAAC;EACDC,QAAQ,EAAE;IACRF,IAAI,EAAE,IAAI;IACVC,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,YAAY,GAAG,CAACC,MAAM,EAAEC,KAAK,KAAK;EAC7C,MAAMC,MAAM,GAAGhB,aAAa,CAACc,MAAM,EAAE,cAAc,CAAC;EACpD,MAAMG,eAAe,GAAGpB,KAAK,CAACqB,MAAM,CAAC,IAAI,CAAC;EAC1C,MAAMC,YAAY,GAAGtB,KAAK,CAACuB,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,KAAK;IACpD,MAAMC,WAAW,GAAGpB,qBAAqB,CAACW,MAAM,CAAC;IAEjD,IAAI,CAACS,WAAW,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACF,EAAE,MAAMA,EAAE,IAAI,CAACE,WAAW,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACD,KAAK,MAAMA,KAAK,EAAE;MAC1H;IACF;IAEAR,MAAM,CAACU,OAAO,CAACC,QAAQ,CAACjB,KAAK,IAAI;MAC/BQ,MAAM,CAACU,KAAK,CAAE,4BAA2BL,EAAG,cAAaC,KAAM,EAAC,CAAC;MACjE,OAAO1B,QAAQ,CAAC,CAAC,CAAC,EAAEY,KAAK,EAAE;QACzBI,QAAQ,EAAE;UACRF,IAAI,EAAE;YACJW,EAAE;YACFC;UACF,CAAC;UACDX,YAAY,EAAE;QAChB,CAAC;QACDF,KAAK,EAAE;UACLC,IAAI,EAAE;YACJW,EAAE;YACFC;UACF,CAAC;UACDX,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACFG,MAAM,CAACU,OAAO,CAACG,WAAW,EAAE,CAAC,CAAC;;IAE9B,IAAI,CAACb,MAAM,CAACU,OAAO,CAACI,MAAM,CAACP,EAAE,CAAC,EAAE;MAC9B;IACF;IAEAP,MAAM,CAACU,OAAO,CAACK,YAAY,CAAC,aAAa,EAAEf,MAAM,CAACU,OAAO,CAACM,aAAa,CAACT,EAAE,EAAEC,KAAK,CAAC,CAAC;EACrF,CAAC,EAAE,CAACR,MAAM,EAAEE,MAAM,CAAC,CAAC;EACpB,MAAMe,oBAAoB,GAAGlC,KAAK,CAACuB,WAAW,CAAC,UAACE,KAAK,EAAiB;IAAA,IAAfU,KAAK,uEAAG,CAAC,CAAC;IAC/D,MAAMtB,IAAI,GAAGP,qBAAqB,CAACW,MAAM,CAAC;IAE1C,IAAIJ,IAAI,EAAE;MACRI,MAAM,CAACU,OAAO,CAACK,YAAY,CAAC,cAAc,EAAEf,MAAM,CAACU,OAAO,CAACM,aAAa,CAACpB,IAAI,CAACW,EAAE,EAAEX,IAAI,CAACY,KAAK,CAAC,EAAEU,KAAK,CAAC;IACvG;IAEAlB,MAAM,CAACU,OAAO,CAACC,QAAQ,CAACjB,KAAK,IAAI;MAC/BQ,MAAM,CAACU,KAAK,CAAE,2CAA0CJ,KAAM,EAAC,CAAC;MAChE,OAAO1B,QAAQ,CAAC,CAAC,CAAC,EAAEY,KAAK,EAAE;QACzBI,QAAQ,EAAE;UACRD,YAAY,EAAE;YACZW;UACF,CAAC;UACDZ,IAAI,EAAE;QACR,CAAC;QACDD,KAAK,EAAE;UACLE,YAAY,EAAE;YACZW;UACF,CAAC;UACDZ,IAAI,EAAE;QACR;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACFI,MAAM,CAACU,OAAO,CAACG,WAAW,EAAE;EAC9B,CAAC,EAAE,CAACb,MAAM,EAAEE,MAAM,CAAC,CAAC;EACpB,MAAMiB,uBAAuB,GAAGpC,KAAK,CAACuB,WAAW,CAAC,CAACC,EAAE,EAAEC,KAAK,EAAEY,SAAS,KAAK;IAC1E,IAAIC,kBAAkB,GAAGrB,MAAM,CAACU,OAAO,CAACY,cAAc,CAACd,KAAK,CAAC;IAC7D,IAAIe,eAAe,GAAGvB,MAAM,CAACU,OAAO,CAACc,gCAAgC,CAACjB,EAAE,CAAC;IACzE,MAAMkB,cAAc,GAAGnC,oCAAoC,CAACU,MAAM,CAAC;IAEnE,IAAIoB,SAAS,KAAK,OAAO,EAAE;MACzBC,kBAAkB,IAAI,CAAC;IACzB,CAAC,MAAM,IAAID,SAAS,KAAK,MAAM,EAAE;MAC/BC,kBAAkB,IAAI,CAAC;IACzB,CAAC,MAAM;MACLE,eAAe,IAAI,CAAC;IACtB;IAEA,MAAMG,WAAW,GAAGnC,cAAc,CAACS,MAAM,EAAE;MACzC2B,UAAU,EAAE1B,KAAK,CAAC0B,UAAU;MAC5BC,cAAc,EAAE3B,KAAK,CAAC2B;IACxB,CAAC,CAAC;IAEF,IAAIP,kBAAkB,IAAII,cAAc,CAACI,MAAM,EAAE;MAC/C;MACAN,eAAe,IAAI,CAAC;MAEpB,IAAIA,eAAe,GAAGG,WAAW,CAACI,IAAI,CAACD,MAAM,EAAE;QAC7C;QACAR,kBAAkB,GAAG,CAAC;MACxB;IACF,CAAC,MAAM,IAAIA,kBAAkB,GAAG,CAAC,EAAE;MACjC;MACAE,eAAe,IAAI,CAAC;MAEpB,IAAIA,eAAe,IAAI,CAAC,EAAE;QACxB;QACAF,kBAAkB,GAAGI,cAAc,CAACI,MAAM,GAAG,CAAC;MAChD;IACF;IAEAN,eAAe,GAAG/B,KAAK,CAAC+B,eAAe,EAAE,CAAC,EAAEG,WAAW,CAACI,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC;IACxER,kBAAkB,GAAG7B,KAAK,CAAC6B,kBAAkB,EAAE,CAAC,EAAEI,cAAc,CAACI,MAAM,GAAG,CAAC,CAAC;IAC5E,MAAME,UAAU,GAAGL,WAAW,CAACI,IAAI,CAACP,eAAe,CAAC;IACpD,MAAMS,aAAa,GAAGP,cAAc,CAACJ,kBAAkB,CAAC;IACxDrB,MAAM,CAACU,OAAO,CAACL,YAAY,CAAC0B,UAAU,CAACxB,EAAE,EAAEyB,aAAa,CAACxB,KAAK,CAAC;EACjE,CAAC,EAAE,CAACR,MAAM,EAAEC,KAAK,CAAC0B,UAAU,EAAE1B,KAAK,CAAC2B,cAAc,CAAC,CAAC;EACpD,MAAMK,qBAAqB,GAAGlD,KAAK,CAACuB,WAAW,CAAC,QAG1C;IAAA,IAH2C;MAC/CC,EAAE;MACFC;IACF,CAAC;IACCR,MAAM,CAACU,OAAO,CAACL,YAAY,CAACE,EAAE,EAAEC,KAAK,CAAC;EACxC,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EACZ,MAAMkC,iBAAiB,GAAGnD,KAAK,CAACuB,WAAW,CAAC,CAAC6B,MAAM,EAAEjB,KAAK,KAAK;IAC7D;IACA,IAAIA,KAAK,CAACkB,GAAG,KAAK,OAAO,IAAIlB,KAAK,CAACkB,GAAG,KAAK,KAAK,IAAIhD,eAAe,CAAC8B,KAAK,CAACkB,GAAG,CAAC,EAAE;MAC9E;IACF;IAEApC,MAAM,CAACU,OAAO,CAACL,YAAY,CAAC8B,MAAM,CAAC5B,EAAE,EAAE4B,MAAM,CAAC3B,KAAK,CAAC;EACtD,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EACZ,MAAMqC,uBAAuB,GAAGtD,KAAK,CAACuB,WAAW,CAAC,QAE/CY,KAAK,KAAK;IAAA,IAFsC;MACjDV;IACF,CAAC;IACC,IAAIU,KAAK,CAACoB,MAAM,KAAKpB,KAAK,CAACqB,aAAa,EAAE;MACxC;IACF;IAEAvC,MAAM,CAACU,OAAO,CAACO,oBAAoB,CAACT,KAAK,EAAEU,KAAK,CAAC;EACnD,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EACZ,MAAMwC,UAAU,GAAGzD,KAAK,CAACuB,WAAW,CAAC,MAAM;IACzCJ,MAAM,CAACU,KAAK,CAAE,gBAAe,CAAC;IAC9BZ,MAAM,CAACU,OAAO,CAACC,QAAQ,CAACjB,KAAK,IAAIZ,QAAQ,CAAC,CAAC,CAAC,EAAEY,KAAK,EAAE;MACnDC,KAAK,EAAE;QACLC,IAAI,EAAE,IAAI;QACVC,YAAY,EAAE;MAChB;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACK,MAAM,EAAEF,MAAM,CAAC,CAAC;EACpB,MAAMyC,iBAAiB,GAAG1D,KAAK,CAACuB,WAAW,CAAC6B,MAAM,IAAI;IACpDhC,eAAe,CAACO,OAAO,GAAGyB,MAAM;EAClC,CAAC,EAAE,EAAE,CAAC;EACN,MAAMO,mBAAmB,GAAG3D,KAAK,CAACuB,WAAW,CAACY,KAAK,IAAI;IACrD,MAAMyB,UAAU,GAAGxC,eAAe,CAACO,OAAO;IAC1CP,eAAe,CAACO,OAAO,GAAG,IAAI;IAC9B,MAAMD,WAAW,GAAGpB,qBAAqB,CAACW,MAAM,CAAC;IAEjD,IAAI,CAACS,WAAW,EAAE;MAChB,IAAIkC,UAAU,EAAE;QACd3C,MAAM,CAACU,OAAO,CAACL,YAAY,CAACsC,UAAU,CAACpC,EAAE,EAAEoC,UAAU,CAACnC,KAAK,CAAC;MAC9D;MAEA;IACF;IAEA,IAAI,CAACmC,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACpC,EAAE,MAAME,WAAW,CAACF,EAAE,IAAI,CAACoC,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACnC,KAAK,MAAMC,WAAW,CAACD,KAAK,EAAE;MAC9I;IACF;IAEA,MAAMoC,WAAW,GAAG5C,MAAM,CAACU,OAAO,CAACmC,cAAc,CAACpC,WAAW,CAACF,EAAE,EAAEE,WAAW,CAACD,KAAK,CAAC;IAEpF,IAAIoC,WAAW,IAAI,IAAI,IAAIA,WAAW,CAACE,QAAQ,CAAC5B,KAAK,CAACoB,MAAM,CAAC,EAAE;MAC7D;IACF,CAAC,CAAC;;IAGF,IAAI,CAACtC,MAAM,CAACU,OAAO,CAACI,MAAM,CAACL,WAAW,CAACF,EAAE,CAAC,EAAE;MAC1C;IACF,CAAC,CAAC;IACF;;IAGAP,MAAM,CAACU,OAAO,CAACK,YAAY,CAAC,cAAc,EAAEf,MAAM,CAACU,OAAO,CAACM,aAAa,CAACP,WAAW,CAACF,EAAE,EAAEE,WAAW,CAACD,KAAK,CAAC,EAAEU,KAAK,CAAC;IAEnH,IAAIyB,UAAU,EAAE;MACd3C,MAAM,CAACU,OAAO,CAACL,YAAY,CAACsC,UAAU,CAACpC,EAAE,EAAEoC,UAAU,CAACnC,KAAK,CAAC;IAC9D,CAAC,MAAM;MACLR,MAAM,CAACU,OAAO,CAACC,QAAQ,CAACjB,KAAK,IAAIZ,QAAQ,CAAC,CAAC,CAAC,EAAEY,KAAK,EAAE;QACnDC,KAAK,EAAE;UACLC,IAAI,EAAE,IAAI;UACVC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC,CAAC;MACHG,MAAM,CAACU,OAAO,CAACG,WAAW,EAAE;IAC9B;EACF,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC;EACZ,MAAM+C,oBAAoB,GAAGhE,KAAK,CAACuB,WAAW,CAAC6B,MAAM,IAAI;IACvD,IAAIA,MAAM,CAACa,QAAQ,KAAK,MAAM,EAAE;MAC9B;IACF;IAEA,MAAMpD,IAAI,GAAGP,qBAAqB,CAACW,MAAM,CAAC;IAE1C,IAAI,CAACJ,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACW,EAAE,MAAM4B,MAAM,CAAC5B,EAAE,IAAI,CAACX,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACY,KAAK,MAAM2B,MAAM,CAAC3B,KAAK,EAAE;MAC5GR,MAAM,CAACU,OAAO,CAACL,YAAY,CAAC8B,MAAM,CAAC5B,EAAE,EAAE4B,MAAM,CAAC3B,KAAK,CAAC;IACtD;EACF,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EACZ,MAAMiD,YAAY,GAAGlE,KAAK,CAACuB,WAAW,CAAC,MAAM;IAC3C,MAAMV,IAAI,GAAGP,qBAAqB,CAACW,MAAM,CAAC,CAAC,CAAC;;IAE5C,IAAIJ,IAAI,IAAI,CAACI,MAAM,CAACU,OAAO,CAACI,MAAM,CAAClB,IAAI,CAACW,EAAE,CAAC,EAAE;MAC3CP,MAAM,CAACU,OAAO,CAACC,QAAQ,CAACjB,KAAK,IAAIZ,QAAQ,CAAC,CAAC,CAAC,EAAEY,KAAK,EAAE;QACnDC,KAAK,EAAE;UACLC,IAAI,EAAE,IAAI;UACVC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACG,MAAM,CAAC,CAAC;EACZf,gBAAgB,CAACe,MAAM,EAAE;IACvBK,YAAY;IACZY,oBAAoB;IACpBiC,gCAAgC,EAAE/B;EACpC,CAAC,EAAE,cAAc,CAAC;EAClBpC,KAAK,CAACoE,SAAS,CAAC,MAAM;IACpB,MAAMC,GAAG,GAAGpE,aAAa,CAACgB,MAAM,CAACU,OAAO,CAAC2C,cAAc,CAAC3C,OAAO,CAAC;IAChE0C,GAAG,CAACE,gBAAgB,CAAC,OAAO,EAAEZ,mBAAmB,CAAC;IAClD,OAAO,MAAM;MACXU,GAAG,CAACG,mBAAmB,CAAC,OAAO,EAAEb,mBAAmB,CAAC;IACvD,CAAC;EACH,CAAC,EAAE,CAAC1C,MAAM,EAAE0C,mBAAmB,CAAC,CAAC;EACjCvD,sBAAsB,CAACa,MAAM,EAAE,kBAAkB,EAAEwC,UAAU,CAAC;EAC9DrD,sBAAsB,CAACa,MAAM,EAAE,iBAAiB,EAAEiC,qBAAqB,CAAC;EACxE9C,sBAAsB,CAACa,MAAM,EAAE,aAAa,EAAEyC,iBAAiB,CAAC;EAChEtD,sBAAsB,CAACa,MAAM,EAAE,aAAa,EAAEkC,iBAAiB,CAAC;EAChE/C,sBAAsB,CAACa,MAAM,EAAE,gBAAgB,EAAE+C,oBAAoB,CAAC;EACtE5D,sBAAsB,CAACa,MAAM,EAAE,mBAAmB,EAAEqC,uBAAuB,CAAC;EAC5ElD,sBAAsB,CAACa,MAAM,EAAE,SAAS,EAAEiD,YAAY,CAAC;AACzD,CAAC"},"metadata":{},"sourceType":"module"}