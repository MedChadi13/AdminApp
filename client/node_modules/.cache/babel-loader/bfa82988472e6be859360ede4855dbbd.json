{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"cellFocus\", \"cellTabIndex\", \"editRowsState\", \"isLastVisible\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"];\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst EmptyCell = _ref => {\n  let {\n    width\n  } = _ref;\n  if (!width) {\n    return null;\n  }\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n};\n\nfunction GridRow(props) {\n  var _apiRef$current$getRo;\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      renderedColumns,\n      containerWidth,\n      firstColumnToRender,\n      cellFocus,\n      cellTabIndex,\n      editRowsState,\n      isLastVisible = false,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ariaRowIndex = index + 2; // 1 for the header row and 1 as it's 1-based\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const {\n    hasScrollX,\n    hasScrollY\n  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  };\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight);\n    }\n  }, [apiRef, rowHeight, rowId]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if pageSize=5 and page=1. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId); // pinned rows are not part of the visible rows\n\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight: rowHeight\n  });\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    style[property] = sizes.spacingBottom;\n  }\n  let rowClassName = null;\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - currentPage.range.firstRowIndex;\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassName = rootProps.getRowClassName(rowParams);\n  }\n  const cells = [];\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;\n    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = [];\n    const disableDragEvents = rootProps.disableColumnReorder && column.disableReorder || !rootProps.rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content = null;\n    if (editCellState == null && column.renderCell) {\n      var _rootProps$classes;\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));\n    }\n    if (editCellState != null && column.renderEditCell) {\n      var _rootProps$classes2;\n      let updatedRow = row;\n      if (apiRef.current.unstable_getRowWithUpdatedValues) {\n        // Only the new editing API has this method\n        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);\n      }\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellState, {\n        api: apiRef.current\n      });\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));\n    }\n    if (rootProps.getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(rootProps.getCellClassName(cellParams));\n    }\n    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;\n    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      var _rootProps$components;\n      const {\n        colSpan,\n        width\n      } = cellColSpanInfo.cellProps;\n      cells.push( /*#__PURE__*/_jsx(rootProps.components.Cell, _extends({\n        value: cellParams.value,\n        field: column.field,\n        width: width,\n        rowId: rowId,\n        height: rowHeight,\n        showRightBorder: showRightBorder,\n        formattedValue: cellParams.formattedValue,\n        align: column.align || 'left',\n        cellMode: cellParams.cellMode,\n        colIndex: indexRelativeToAllColumns,\n        isEditable: cellParams.isEditable,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        className: clsx(classNames),\n        colSpan: colSpan,\n        disableDragEvents: disableDragEvents\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {\n        children: content\n      }), column.field));\n    }\n  }\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: ref,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(rowClassName, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style,\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  }, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  cellFocus: PropTypes.object,\n  cellTabIndex: PropTypes.object,\n  containerWidth: PropTypes.number.isRequired,\n  editRowsState: PropTypes.object.isRequired,\n  firstColumnToRender: PropTypes.number.isRequired,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number.isRequired,\n  renderedColumns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.any.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nexport { GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridColumnsTotalWidthSelector","useGridSelector","useGridVisibleRows","findParentElementFromClassName","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridSortModelSelector","gridRowTreeDepthSelector","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","editable","editing","selected","isLastVisible","rowHeight","classes","slots","root","EmptyCell","width","style","className","GridRow","props","_apiRef$current$getRo","rowId","row","index","styleProp","visibleColumns","renderedColumns","containerWidth","firstColumnToRender","cellFocus","cellTabIndex","editRowsState","onClick","onDoubleClick","onMouseEnter","onMouseLeave","other","ariaRowIndex","apiRef","ref","useRef","rootProps","currentPage","columnsTotalWidth","sortModel","treeDepth","hasScrollX","hasScrollY","current","getRootDimensions","getRowMode","Edit","editMode","Row","useLayoutEffect","ResizeObserver","unstable_storeRowHeightMeasurement","clientHeight","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","rootElement","hasFixedHeight","undefined","resizeObserver","entries","entry","height","borderBoxSize","length","blockSize","contentRect","observe","disconnect","publish","useCallback","eventName","propHandler","event","target","nodeType","currentTarget","contains","getRow","publishEvent","getRowParams","publishClick","cell","field","getAttribute","getCellMode","column","getColumn","type","maxHeight","minHeight","sizes","unstable_getRowInternalSizes","spacingTop","property","rowSpacingType","spacingBottom","rowClassName","getRowClassName","indexRelativeToCurrentPage","firstRowIndex","rowParams","isFirstVisible","rows","cells","i","indexRelativeToAllColumns","isLastColumn","removeLastBorderRight","showRightBorder","showCellRightBorder","disableExtendRowFullWidth","cellParams","getCellParams","classNames","disableDragEvents","disableColumnReorder","disableReorder","rowReordering","Object","keys","cellClassName","push","editCellState","content","renderCell","_rootProps$classes","api","renderEditCell","_rootProps$classes2","updatedRow","unstable_getRowWithUpdatedValues","params","getCellClassName","hasFocus","id","tabIndex","cellMode","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","_rootProps$components","colSpan","cellProps","components","Cell","value","formattedValue","align","colIndex","isEditable","componentsProps","children","emptyCellWidth","role","process","env","NODE_ENV","propTypes","object","number","isRequired","bool","lastColumnToRender","arrayOf","any","oneOfType","oneOf","string"],"sources":["/Users/user/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"cellFocus\", \"cellTabIndex\", \"editRowsState\", \"isLastVisible\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"];\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst EmptyCell = ({\n  width\n}) => {\n  if (!width) {\n    return null;\n  }\n\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n};\n\nfunction GridRow(props) {\n  var _apiRef$current$getRo;\n\n  const {\n    selected,\n    rowId,\n    row,\n    index,\n    style: styleProp,\n    rowHeight,\n    className,\n    visibleColumns,\n    renderedColumns,\n    containerWidth,\n    firstColumnToRender,\n    cellFocus,\n    cellTabIndex,\n    editRowsState,\n    isLastVisible = false,\n    onClick,\n    onDoubleClick,\n    onMouseEnter,\n    onMouseLeave\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ariaRowIndex = index + 2; // 1 for the header row and 1 as it's 1-based\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const {\n    hasScrollX,\n    hasScrollY\n  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  };\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight);\n    }\n  }, [apiRef, rowHeight, rowId]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if pageSize=5 and page=1. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId); // pinned rows are not part of the visible rows\n\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    } // The row might have been deleted\n\n\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      } // User opened a detail panel\n\n\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      } // User reorders a row\n\n\n      if (field === '__reorder__') {\n        return;\n      } // User is editing a cell\n\n\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      } // User clicked a button from the \"actions\" column type\n\n\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight: rowHeight\n  });\n\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    style[property] = sizes.spacingBottom;\n  }\n\n  let rowClassName = null;\n\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - currentPage.range.firstRowIndex;\n\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n\n    rowClassName = rootProps.getRowClassName(rowParams);\n  }\n\n  const cells = [];\n\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;\n    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = [];\n    const disableDragEvents = rootProps.disableColumnReorder && column.disableReorder || !rootProps.rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content = null;\n\n    if (editCellState == null && column.renderCell) {\n      var _rootProps$classes;\n\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      })); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));\n    }\n\n    if (editCellState != null && column.renderEditCell) {\n      var _rootProps$classes2;\n\n      let updatedRow = row;\n\n      if (apiRef.current.unstable_getRowWithUpdatedValues) {\n        // Only the new editing API has this method\n        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);\n      }\n\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellState, {\n        api: apiRef.current\n      });\n\n      content = column.renderEditCell(params); // TODO move to GridCell\n\n      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));\n    }\n\n    if (rootProps.getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(rootProps.getCellClassName(cellParams));\n    }\n\n    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;\n    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      var _rootProps$components;\n\n      const {\n        colSpan,\n        width\n      } = cellColSpanInfo.cellProps;\n      cells.push( /*#__PURE__*/_jsx(rootProps.components.Cell, _extends({\n        value: cellParams.value,\n        field: column.field,\n        width: width,\n        rowId: rowId,\n        height: rowHeight,\n        showRightBorder: showRightBorder,\n        formattedValue: cellParams.formattedValue,\n        align: column.align || 'left',\n        cellMode: cellParams.cellMode,\n        colIndex: indexRelativeToAllColumns,\n        isEditable: cellParams.isEditable,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        className: clsx(classNames),\n        colSpan: colSpan,\n        disableDragEvents: disableDragEvents\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {\n        children: content\n      }), column.field));\n    }\n  }\n\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: ref,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(rowClassName, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style,\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  }, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  cellFocus: PropTypes.object,\n  cellTabIndex: PropTypes.object,\n  containerWidth: PropTypes.number.isRequired,\n  editRowsState: PropTypes.object.isRequired,\n  firstColumnToRender: PropTypes.number.isRequired,\n\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number.isRequired,\n  renderedColumns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.any.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nexport { GridRow };"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,WAAW,EAAE,cAAc,EAAE,eAAe,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,EAAE,cAAc,EAAE,cAAc,CAAC;;AAEzT;;AAEA;AACA,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,uBAAuB,IAAIC,cAAc,QAAQ,eAAe;AACzE,SAASC,aAAa,EAAEC,YAAY,EAAEC,aAAa,QAAQ,4BAA4B;AACvF,SAASC,iBAAiB,QAAQ,kCAAkC;AACpE,SAASC,uBAAuB,EAAEC,WAAW,QAAQ,0BAA0B;AAC/E,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,6BAA6B,QAAQ,+CAA+C;AAC7F,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,kBAAkB,QAAQ,mCAAmC;AACtE,SAASC,8BAA8B,QAAQ,mBAAmB;AAClE,SAASC,+BAA+B,QAAQ,uCAAuC;AACvF,SAASC,wBAAwB,QAAQ,6BAA6B;AACtE,SAASC,8BAA8B,QAAQ,yCAAyC;AACxF,SAASC,qBAAqB,QAAQ,+CAA+C;AACrF,SAASC,wBAAwB,QAAQ,yCAAyC;AAClF,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AAEjD,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;EACtC,MAAM;IACJC,QAAQ;IACRC,OAAO;IACPC,QAAQ;IACRC,aAAa;IACbC,SAAS;IACTC;EACF,CAAC,GAAGN,UAAU;EACd,MAAMO,KAAK,GAAG;IACZC,IAAI,EAAE,CAAC,KAAK,EAAEL,QAAQ,IAAI,UAAU,EAAEF,QAAQ,IAAI,eAAe,EAAEC,OAAO,IAAI,cAAc,EAAEE,aAAa,IAAI,kBAAkB,EAAEC,SAAS,KAAK,MAAM,IAAI,oBAAoB;EACjL,CAAC;EACD,OAAO3B,cAAc,CAAC6B,KAAK,EAAExB,uBAAuB,EAAEuB,OAAO,CAAC;AAChE,CAAC;AAED,MAAMG,SAAS,GAAG,QAEZ;EAAA,IAFa;IACjBC;EACF,CAAC;EACC,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,KAAK,GAAG;IACZD;EACF,CAAC;EACD,OAAO,aAAad,IAAI,CAAC,KAAK,EAAE;IAC9BgB,SAAS,EAAE,kBAAkB;IAC7BD,KAAK,EAAEA;EACT,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;;AAED,SAASE,OAAO,CAACC,KAAK,EAAE;EACtB,IAAIC,qBAAqB;EAEzB,MAAM;MACJZ,QAAQ;MACRa,KAAK;MACLC,GAAG;MACHC,KAAK;MACLP,KAAK,EAAEQ,SAAS;MAChBd,SAAS;MACTO,SAAS;MACTQ,cAAc;MACdC,eAAe;MACfC,cAAc;MACdC,mBAAmB;MACnBC,SAAS;MACTC,YAAY;MACZC,aAAa;MACbtB,aAAa,GAAG,KAAK;MACrBuB,OAAO;MACPC,aAAa;MACbC,YAAY;MACZC;IACF,CAAC,GAAGhB,KAAK;IACHiB,KAAK,GAAG3D,6BAA6B,CAAC0C,KAAK,EAAEzC,SAAS,CAAC;EAE7D,MAAM2D,YAAY,GAAGd,KAAK,GAAG,CAAC,CAAC,CAAC;;EAEhC,MAAMe,MAAM,GAAGnD,iBAAiB,EAAE;EAClC,MAAMoD,GAAG,GAAG5D,KAAK,CAAC6D,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMC,SAAS,GAAGnD,gBAAgB,EAAE;EACpC,MAAMoD,WAAW,GAAGjD,kBAAkB,CAAC6C,MAAM,EAAEG,SAAS,CAAC;EACzD,MAAME,iBAAiB,GAAGnD,eAAe,CAAC8C,MAAM,EAAE/C,6BAA6B,CAAC;EAChF,MAAMqD,SAAS,GAAGpD,eAAe,CAAC8C,MAAM,EAAExC,qBAAqB,CAAC;EAChE,MAAM+C,SAAS,GAAGrD,eAAe,CAAC8C,MAAM,EAAEvC,wBAAwB,CAAC;EACnE,MAAM;IACJ+C,UAAU;IACVC;EACF,CAAC,GAAG,CAAC3B,qBAAqB,GAAGkB,MAAM,CAACU,OAAO,CAACC,iBAAiB,EAAE,KAAK,IAAI,GAAG7B,qBAAqB,GAAG;IACjG0B,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAE;EACd,CAAC;EACD,MAAM1C,UAAU,GAAG;IACjBG,QAAQ;IACRC,aAAa;IACbE,OAAO,EAAE8B,SAAS,CAAC9B,OAAO;IAC1BJ,OAAO,EAAE+B,MAAM,CAACU,OAAO,CAACE,UAAU,CAAC7B,KAAK,CAAC,KAAKpC,YAAY,CAACkE,IAAI;IAC/D7C,QAAQ,EAAEmC,SAAS,CAACW,QAAQ,KAAKpE,aAAa,CAACqE,GAAG;IAClD3C;EACF,CAAC;EACD,MAAMC,OAAO,GAAGP,iBAAiB,CAACC,UAAU,CAAC;EAC7C1B,KAAK,CAAC2E,eAAe,CAAC,MAAM;IAC1B,IAAI5C,SAAS,KAAK,MAAM,IAAI6B,GAAG,CAACS,OAAO,IAAI,OAAOO,cAAc,KAAK,WAAW,EAAE;MAChF;MACAjB,MAAM,CAACU,OAAO,CAACQ,kCAAkC,CAACnC,KAAK,EAAEkB,GAAG,CAACS,OAAO,CAACS,YAAY,CAAC;IACpF;EACF,CAAC,EAAE,CAACnB,MAAM,EAAE5B,SAAS,EAAEW,KAAK,CAAC,CAAC;EAC9B1C,KAAK,CAAC2E,eAAe,CAAC,MAAM;IAC1B,IAAIZ,WAAW,CAACgB,KAAK,EAAE;MACrB;MACA;MACA;MACA;MACA;MACA,MAAMC,QAAQ,GAAGrB,MAAM,CAACU,OAAO,CAACY,gCAAgC,CAACvC,KAAK,CAAC,CAAC,CAAC;;MAEzE,IAAIsC,QAAQ,IAAI,IAAI,EAAE;QACpBrB,MAAM,CAACU,OAAO,CAACa,gCAAgC,CAACF,QAAQ,CAAC;MAC3D;IACF;IAEA,MAAMG,WAAW,GAAGvB,GAAG,CAACS,OAAO;IAC/B,MAAMe,cAAc,GAAGrD,SAAS,KAAK,MAAM;IAE3C,IAAI,CAACoD,WAAW,IAAIC,cAAc,IAAI,OAAOR,cAAc,KAAK,WAAW,EAAE;MAC3E,OAAOS,SAAS;IAClB;IAEA,MAAMC,cAAc,GAAG,IAAIV,cAAc,CAACW,OAAO,IAAI;MACnD,MAAM,CAACC,KAAK,CAAC,GAAGD,OAAO;MACvB,MAAME,MAAM,GAAGD,KAAK,CAACE,aAAa,IAAIF,KAAK,CAACE,aAAa,CAACC,MAAM,GAAG,CAAC,GAAGH,KAAK,CAACE,aAAa,CAAC,CAAC,CAAC,CAACE,SAAS,GAAGJ,KAAK,CAACK,WAAW,CAACJ,MAAM;MAClI9B,MAAM,CAACU,OAAO,CAACQ,kCAAkC,CAACnC,KAAK,EAAE+C,MAAM,CAAC;IAClE,CAAC,CAAC;IACFH,cAAc,CAACQ,OAAO,CAACX,WAAW,CAAC;IACnC,OAAO,MAAMG,cAAc,CAACS,UAAU,EAAE;EAC1C,CAAC,EAAE,CAACpC,MAAM,EAAEI,WAAW,CAACgB,KAAK,EAAEnC,KAAK,EAAEb,SAAS,EAAEW,KAAK,CAAC,CAAC;EACxD,MAAMsD,OAAO,GAAGhG,KAAK,CAACiG,WAAW,CAAC,CAACC,SAAS,EAAEC,WAAW,KAAKC,KAAK,IAAI;IACrE;IACA;IACA;IACA,IAAIA,KAAK,CAACC,MAAM,CAACC,QAAQ,KAAK,CAAC,IAAI,CAACF,KAAK,CAACG,aAAa,CAACC,QAAQ,CAACJ,KAAK,CAACC,MAAM,CAAC,EAAE;MAC9E;IACF,CAAC,CAAC;;IAGF,IAAI,CAAC1C,MAAM,CAACU,OAAO,CAACoC,MAAM,CAAC/D,KAAK,CAAC,EAAE;MACjC;IACF;IAEAiB,MAAM,CAACU,OAAO,CAACqC,YAAY,CAACR,SAAS,EAAEvC,MAAM,CAACU,OAAO,CAACsC,YAAY,CAACjE,KAAK,CAAC,EAAE0D,KAAK,CAAC;IAEjF,IAAID,WAAW,EAAE;MACfA,WAAW,CAACC,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,CAACzC,MAAM,EAAEjB,KAAK,CAAC,CAAC;EACnB,MAAMkE,YAAY,GAAG5G,KAAK,CAACiG,WAAW,CAACG,KAAK,IAAI;IAC9C,MAAMS,IAAI,GAAG9F,8BAA8B,CAACqF,KAAK,CAACC,MAAM,EAAE3F,WAAW,CAACmG,IAAI,CAAC;IAC3E,MAAMC,KAAK,GAAGD,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACE,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;IACvE;;IAEA,IAAID,KAAK,EAAE;MACT;MACA,IAAIA,KAAK,KAAK9F,+BAA+B,CAAC8F,KAAK,EAAE;QACnD;MACF,CAAC,CAAC;;MAGF,IAAIA,KAAK,KAAK5F,8BAA8B,EAAE;QAC5C;MACF,CAAC,CAAC;;MAGF,IAAI4F,KAAK,KAAK,aAAa,EAAE;QAC3B;MACF,CAAC,CAAC;;MAGF,IAAInD,MAAM,CAACU,OAAO,CAAC2C,WAAW,CAACtE,KAAK,EAAEoE,KAAK,CAAC,KAAKvG,aAAa,CAACiE,IAAI,EAAE;QACnE;MACF,CAAC,CAAC;;MAGF,MAAMyC,MAAM,GAAGtD,MAAM,CAACU,OAAO,CAAC6C,SAAS,CAACJ,KAAK,CAAC;MAE9C,IAAIG,MAAM,CAACE,IAAI,KAAKlG,wBAAwB,EAAE;QAC5C;MACF;IACF;IAEA+E,OAAO,CAAC,UAAU,EAAE3C,OAAO,CAAC,CAAC+C,KAAK,CAAC;EACrC,CAAC,EAAE,CAACzC,MAAM,EAAEN,OAAO,EAAE2C,OAAO,EAAEtD,KAAK,CAAC,CAAC;EAErC,MAAML,KAAK,GAAGxC,QAAQ,CAAC,CAAC,CAAC,EAAEgD,SAAS,EAAE;IACpCuE,SAAS,EAAErF,SAAS,KAAK,MAAM,GAAG,MAAM,GAAGA,SAAS;IACpD;IACAsF,SAAS,EAAEtF;EACb,CAAC,CAAC;EAEF,MAAMuF,KAAK,GAAG3D,MAAM,CAACU,OAAO,CAACkD,4BAA4B,CAAC7E,KAAK,CAAC;EAEhE,IAAI4E,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACE,UAAU,EAAE;IACrC,MAAMC,QAAQ,GAAG3D,SAAS,CAAC4D,cAAc,KAAK,QAAQ,GAAG,gBAAgB,GAAG,WAAW;IACvFrF,KAAK,CAACoF,QAAQ,CAAC,GAAGH,KAAK,CAACE,UAAU;EACpC;EAEA,IAAIF,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACK,aAAa,EAAE;IACxC,MAAMF,QAAQ,GAAG3D,SAAS,CAAC4D,cAAc,KAAK,QAAQ,GAAG,mBAAmB,GAAG,cAAc;IAC7FrF,KAAK,CAACoF,QAAQ,CAAC,GAAGH,KAAK,CAACK,aAAa;EACvC;EAEA,IAAIC,YAAY,GAAG,IAAI;EAEvB,IAAI,OAAO9D,SAAS,CAAC+D,eAAe,KAAK,UAAU,EAAE;IACnD,MAAMC,0BAA0B,GAAGlF,KAAK,GAAGmB,WAAW,CAACgB,KAAK,CAACgD,aAAa;IAE1E,MAAMC,SAAS,GAAGnI,QAAQ,CAAC,CAAC,CAAC,EAAE8D,MAAM,CAACU,OAAO,CAACsC,YAAY,CAACjE,KAAK,CAAC,EAAE;MACjEuF,cAAc,EAAEH,0BAA0B,KAAK,CAAC;MAChDhG,aAAa,EAAEgG,0BAA0B,KAAK/D,WAAW,CAACmE,IAAI,CAACvC,MAAM,GAAG,CAAC;MACzEmC;IACF,CAAC,CAAC;IAEFF,YAAY,GAAG9D,SAAS,CAAC+D,eAAe,CAACG,SAAS,CAAC;EACrD;EAEA,MAAMG,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrF,eAAe,CAAC4C,MAAM,EAAEyC,CAAC,IAAI,CAAC,EAAE;IAClD,MAAMnB,MAAM,GAAGlE,eAAe,CAACqF,CAAC,CAAC;IACjC,MAAMC,yBAAyB,GAAGpF,mBAAmB,GAAGmF,CAAC;IACzD,MAAME,YAAY,GAAGD,yBAAyB,KAAKvF,cAAc,CAAC6C,MAAM,GAAG,CAAC;IAC5E,MAAM4C,qBAAqB,GAAGD,YAAY,IAAInE,UAAU,IAAI,CAACC,UAAU;IACvE,MAAMoE,eAAe,GAAG,CAACF,YAAY,GAAGxE,SAAS,CAAC2E,mBAAmB,GAAG,CAACF,qBAAqB,IAAIzE,SAAS,CAAC4E,yBAAyB;IACrI,MAAMC,UAAU,GAAGhF,MAAM,CAACU,OAAO,CAACuE,aAAa,CAAClG,KAAK,EAAEuE,MAAM,CAACH,KAAK,CAAC;IACpE,MAAM+B,UAAU,GAAG,EAAE;IACrB,MAAMC,iBAAiB,GAAGhF,SAAS,CAACiF,oBAAoB,IAAI9B,MAAM,CAAC+B,cAAc,IAAI,CAAClF,SAAS,CAACmF,aAAa,IAAI,CAAC,CAAChF,SAAS,CAAC0B,MAAM,IAAIzB,SAAS,GAAG,CAAC,IAAIgF,MAAM,CAACC,IAAI,CAAC/F,aAAa,CAAC,CAACuC,MAAM,GAAG,CAAC;IAE7L,IAAIsB,MAAM,CAACmC,aAAa,EAAE;MACxBP,UAAU,CAACQ,IAAI,CAACnJ,IAAI,CAAC,OAAO+G,MAAM,CAACmC,aAAa,KAAK,UAAU,GAAGnC,MAAM,CAACmC,aAAa,CAACT,UAAU,CAAC,GAAG1B,MAAM,CAACmC,aAAa,CAAC,CAAC;IAC7H;IAEA,MAAME,aAAa,GAAGlG,aAAa,CAACV,KAAK,CAAC,GAAGU,aAAa,CAACV,KAAK,CAAC,CAACuE,MAAM,CAACH,KAAK,CAAC,GAAG,IAAI;IACtF,IAAIyC,OAAO,GAAG,IAAI;IAElB,IAAID,aAAa,IAAI,IAAI,IAAIrC,MAAM,CAACuC,UAAU,EAAE;MAC9C,IAAIC,kBAAkB;MAEtBF,OAAO,GAAGtC,MAAM,CAACuC,UAAU,CAAC3J,QAAQ,CAAC,CAAC,CAAC,EAAE8I,UAAU,EAAE;QACnDe,GAAG,EAAE/F,MAAM,CAACU;MACd,CAAC,CAAC,CAAC,CAAC,CAAC;;MAELwE,UAAU,CAACQ,IAAI,CAACnJ,IAAI,CAACQ,WAAW,CAAC,oBAAoB,CAAC,EAAE,CAAC+I,kBAAkB,GAAG3F,SAAS,CAAC9B,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGyH,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAChK;IAEA,IAAIH,aAAa,IAAI,IAAI,IAAIrC,MAAM,CAAC0C,cAAc,EAAE;MAClD,IAAIC,mBAAmB;MAEvB,IAAIC,UAAU,GAAGlH,GAAG;MAEpB,IAAIgB,MAAM,CAACU,OAAO,CAACyF,gCAAgC,EAAE;QACnD;QACAD,UAAU,GAAGlG,MAAM,CAACU,OAAO,CAACyF,gCAAgC,CAACpH,KAAK,EAAEuE,MAAM,CAACH,KAAK,CAAC;MACnF;MAEA,MAAMiD,MAAM,GAAGlK,QAAQ,CAAC,CAAC,CAAC,EAAE8I,UAAU,EAAE;QACtChG,GAAG,EAAEkH;MACP,CAAC,EAAEP,aAAa,EAAE;QAChBI,GAAG,EAAE/F,MAAM,CAACU;MACd,CAAC,CAAC;MAEFkF,OAAO,GAAGtC,MAAM,CAAC0C,cAAc,CAACI,MAAM,CAAC,CAAC,CAAC;;MAEzClB,UAAU,CAACQ,IAAI,CAACnJ,IAAI,CAACQ,WAAW,CAAC,eAAe,CAAC,EAAE,CAACkJ,mBAAmB,GAAG9F,SAAS,CAAC9B,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG4H,mBAAmB,CAAC,eAAe,CAAC,CAAC,CAAC;IACxJ;IAEA,IAAI9F,SAAS,CAACkG,gBAAgB,EAAE;MAC9B;MACAnB,UAAU,CAACQ,IAAI,CAACvF,SAAS,CAACkG,gBAAgB,CAACrB,UAAU,CAAC,CAAC;IACzD;IAEA,MAAMsB,QAAQ,GAAG/G,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACgH,EAAE,KAAKxH,KAAK,IAAIQ,SAAS,CAAC4D,KAAK,KAAKG,MAAM,CAACH,KAAK;IACjG,MAAMqD,QAAQ,GAAGhH,YAAY,KAAK,IAAI,IAAIA,YAAY,CAAC+G,EAAE,KAAKxH,KAAK,IAAIS,YAAY,CAAC2D,KAAK,KAAKG,MAAM,CAACH,KAAK,IAAI6B,UAAU,CAACyB,QAAQ,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACrJ,MAAMC,eAAe,GAAG1G,MAAM,CAACU,OAAO,CAACiG,2BAA2B,CAAC5H,KAAK,EAAE2F,yBAAyB,CAAC;IAEpG,IAAIgC,eAAe,IAAI,CAACA,eAAe,CAACE,gBAAgB,EAAE;MACxD,IAAIC,qBAAqB;MAEzB,MAAM;QACJC,OAAO;QACPrI;MACF,CAAC,GAAGiI,eAAe,CAACK,SAAS;MAC7BvC,KAAK,CAACkB,IAAI,EAAE,aAAa/H,IAAI,CAACwC,SAAS,CAAC6G,UAAU,CAACC,IAAI,EAAE/K,QAAQ,CAAC;QAChEgL,KAAK,EAAElC,UAAU,CAACkC,KAAK;QACvB/D,KAAK,EAAEG,MAAM,CAACH,KAAK;QACnB1E,KAAK,EAAEA,KAAK;QACZM,KAAK,EAAEA,KAAK;QACZ+C,MAAM,EAAE1D,SAAS;QACjByG,eAAe,EAAEA,eAAe;QAChCsC,cAAc,EAAEnC,UAAU,CAACmC,cAAc;QACzCC,KAAK,EAAE9D,MAAM,CAAC8D,KAAK,IAAI,MAAM;QAC7BX,QAAQ,EAAEzB,UAAU,CAACyB,QAAQ;QAC7BY,QAAQ,EAAE3C,yBAAyB;QACnC4C,UAAU,EAAEtC,UAAU,CAACsC,UAAU;QACjChB,QAAQ,EAAEA,QAAQ;QAClBE,QAAQ,EAAEA,QAAQ;QAClB7H,SAAS,EAAEpC,IAAI,CAAC2I,UAAU,CAAC;QAC3B4B,OAAO,EAAEA,OAAO;QAChB3B,iBAAiB,EAAEA;MACrB,CAAC,EAAE,CAAC0B,qBAAqB,GAAG1G,SAAS,CAACoH,eAAe,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGV,qBAAqB,CAAC3D,IAAI,EAAE;QACpGsE,QAAQ,EAAE5B;MACZ,CAAC,CAAC,EAAEtC,MAAM,CAACH,KAAK,CAAC,CAAC;IACpB;EACF;EAEA,MAAMsE,cAAc,GAAGpI,cAAc,GAAGgB,iBAAiB;EACzD,OAAO,aAAaxC,KAAK,CAAC,KAAK,EAAE3B,QAAQ,CAAC;IACxC+D,GAAG,EAAEA,GAAG;IACR,SAAS,EAAElB,KAAK;IAChB,eAAe,EAAEE,KAAK;IACtByI,IAAI,EAAE,KAAK;IACX/I,SAAS,EAAEpC,IAAI,CAAC0H,YAAY,EAAE5F,OAAO,CAACE,IAAI,EAAEI,SAAS,CAAC;IACtD,eAAe,EAAEoB,YAAY;IAC7B,eAAe,EAAE7B,QAAQ;IACzBQ,KAAK,EAAEA,KAAK;IACZgB,OAAO,EAAEuD,YAAY;IACrBtD,aAAa,EAAE0C,OAAO,CAAC,gBAAgB,EAAE1C,aAAa,CAAC;IACvDC,YAAY,EAAEyC,OAAO,CAAC,eAAe,EAAEzC,YAAY,CAAC;IACpDC,YAAY,EAAEwC,OAAO,CAAC,eAAe,EAAExC,YAAY;EACrD,CAAC,EAAEC,KAAK,EAAE;IACR0H,QAAQ,EAAE,CAAChD,KAAK,EAAEiD,cAAc,GAAG,CAAC,IAAI,aAAa9J,IAAI,CAACa,SAAS,EAAE;MACnEC,KAAK,EAAEgJ;IACT,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC;AACL;AAEAE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGjJ,OAAO,CAACkJ,SAAS,GAAG;EAC1D;EACA;EACA;EACA;EACAvI,SAAS,EAAEjD,SAAS,CAACyL,MAAM;EAC3BvI,YAAY,EAAElD,SAAS,CAACyL,MAAM;EAC9B1I,cAAc,EAAE/C,SAAS,CAAC0L,MAAM,CAACC,UAAU;EAC3CxI,aAAa,EAAEnD,SAAS,CAACyL,MAAM,CAACE,UAAU;EAC1C3I,mBAAmB,EAAEhD,SAAS,CAAC0L,MAAM,CAACC,UAAU;EAEhD;AACF;AACA;AACA;EACEhJ,KAAK,EAAE3C,SAAS,CAAC0L,MAAM,CAACC,UAAU;EAClC9J,aAAa,EAAE7B,SAAS,CAAC4L,IAAI;EAC7BC,kBAAkB,EAAE7L,SAAS,CAAC0L,MAAM,CAACC,UAAU;EAC/C7I,eAAe,EAAE9C,SAAS,CAAC8L,OAAO,CAAC9L,SAAS,CAACyL,MAAM,CAAC,CAACE,UAAU;EAC/DjJ,GAAG,EAAE1C,SAAS,CAAC+L,GAAG,CAACJ,UAAU;EAC7B7J,SAAS,EAAE9B,SAAS,CAACgM,SAAS,CAAC,CAAChM,SAAS,CAACiM,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,EAAEjM,SAAS,CAAC0L,MAAM,CAAC,CAAC,CAACC,UAAU;EACxFlJ,KAAK,EAAEzC,SAAS,CAACgM,SAAS,CAAC,CAAChM,SAAS,CAAC0L,MAAM,EAAE1L,SAAS,CAACkM,MAAM,CAAC,CAAC,CAACP,UAAU;EAC3E/J,QAAQ,EAAE5B,SAAS,CAAC4L,IAAI,CAACD,UAAU;EACnC9I,cAAc,EAAE7C,SAAS,CAAC8L,OAAO,CAAC9L,SAAS,CAACyL,MAAM,CAAC,CAACE;AACtD,CAAC,GAAG,KAAK,CAAC;AACV,SAASrJ,OAAO"},"metadata":{},"sourceType":"module"}