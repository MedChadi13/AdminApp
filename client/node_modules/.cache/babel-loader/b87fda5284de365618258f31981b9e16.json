{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridDensityTypes } from '../../../models/gridDensity';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3; // TODO v6: revise keeping headerHeight and rowHeight in state\n\nconst getUpdatedDensityState = (newDensity, newHeaderHeight, newRowHeight) => {\n  switch (newDensity) {\n    case GridDensityTypes.Compact:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMPACT_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMPACT_DENSITY_FACTOR),\n        factor: COMPACT_DENSITY_FACTOR\n      };\n    case GridDensityTypes.Comfortable:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMFORTABLE_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMFORTABLE_DENSITY_FACTOR),\n        factor: COMFORTABLE_DENSITY_FACTOR\n      };\n    default:\n      return {\n        value: newDensity,\n        headerHeight: newHeaderHeight,\n        rowHeight: newRowHeight,\n        factor: 1\n      };\n  }\n};\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: getUpdatedDensityState(props.density, props.headerHeight, props.rowHeight)\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  const setDensity = React.useCallback(function (newDensity) {\n    let newHeaderHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.headerHeight;\n    let newRowHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.rowHeight;\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = getUpdatedDensityState(newDensity, newHeaderHeight, newRowHeight);\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef, props.headerHeight, props.rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density, props.headerHeight, props.rowHeight);\n  }, [apiRef, props.density, props.rowHeight, props.headerHeight]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'GridDensityApi');\n};","map":{"version":3,"names":["_extends","React","GridDensityTypes","useGridLogger","useGridApiMethod","gridDensitySelector","isDeepEqual","COMPACT_DENSITY_FACTOR","COMFORTABLE_DENSITY_FACTOR","getUpdatedDensityState","newDensity","newHeaderHeight","newRowHeight","Compact","value","headerHeight","Math","floor","rowHeight","factor","Comfortable","densityStateInitializer","state","props","density","useGridDensity","apiRef","logger","setDensity","useCallback","debug","current","setState","currentDensityState","newDensityState","forceUpdate","useEffect","densityApi"],"sources":["/Users/user/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridDensityTypes } from '../../../models/gridDensity';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3; // TODO v6: revise keeping headerHeight and rowHeight in state\n\nconst getUpdatedDensityState = (newDensity, newHeaderHeight, newRowHeight) => {\n  switch (newDensity) {\n    case GridDensityTypes.Compact:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMPACT_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMPACT_DENSITY_FACTOR),\n        factor: COMPACT_DENSITY_FACTOR\n      };\n\n    case GridDensityTypes.Comfortable:\n      return {\n        value: newDensity,\n        headerHeight: Math.floor(newHeaderHeight * COMFORTABLE_DENSITY_FACTOR),\n        rowHeight: Math.floor(newRowHeight * COMFORTABLE_DENSITY_FACTOR),\n        factor: COMFORTABLE_DENSITY_FACTOR\n      };\n\n    default:\n      return {\n        value: newDensity,\n        headerHeight: newHeaderHeight,\n        rowHeight: newRowHeight,\n        factor: 1\n      };\n  }\n};\n\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: getUpdatedDensityState(props.density, props.headerHeight, props.rowHeight)\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  const setDensity = React.useCallback((newDensity, newHeaderHeight = props.headerHeight, newRowHeight = props.rowHeight) => {\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = getUpdatedDensityState(newDensity, newHeaderHeight, newRowHeight);\n\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef, props.headerHeight, props.rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density, props.headerHeight, props.rowHeight);\n  }, [apiRef, props.density, props.rowHeight, props.headerHeight]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'GridDensityApi');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}